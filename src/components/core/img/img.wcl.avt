import { AvRessourceManager } from "../../../libs/ressourceManager.lib.avt";


export class AvImg extends WebComponent implements DefaultComponent {

    //#region static

    //#endregion


    //#region props
    /**
     * Define the source for your image
     */
    @property((target: AvImg) => {
        if(target.src.endsWith(".svg")) {
            AvRessourceManager.get(target.src).then((svgContent) => {
                target.svgEl.innerHTML = svgContent;
                target.calculateSize();
            });
        }
        else if(target.src != "") {
            AvRessourceManager.get(target.src).then((base64) => {
                target.imgEl.setAttribute("src", base64);
                target.calculateSize();
            });
        }
    })
    src: string;

    @attribute()
    display_bigger: boolean;

    @property((target: AvImg) => {
        if(target.src != "") {
            target.calculateSize();
        }
    })
    mode: string = "contains";

    //#endregion


    //#region variables
    bigImg: HTMLElement = undefined;
    ratio: number = 1;
    _maxCalculateSize: number = 10;
    _isCalculing: boolean = false;

    imgEl: HTMLImageElement = undefined;
    svgEl: HTMLElement = undefined;

    //#endregion


    //#region states

    //#endregion


    //#region constructor
    constructor() {
        super();
        this.checkCloseBinded = this.checkClose.bind(this);
    }
    //#endregion


    //#region methods
    private checkCloseBinded: (e) => void;
    private checkClose(e: Event) {
        if(e instanceof KeyboardEvent) {
            if(e.key == 'Escape') {
                this.close();
            }
        }
        else {
            let realTargetEl = e.realTarget();
            if(realTargetEl != this.bigImg) {
                this.close();
            }
        }

    };
    close() {
        this.bigImg.style.opacity = '0';
        document.body.removeEventListener('click', this.checkCloseBinded);
        setTimeout(() => {
            this.bigImg.remove();
        }, 710);
    }
    private calculateSize(attempt = 0) {
        if(this._isCalculing) {
            return;
        }
        if(this.src == "") {
            return;
        }
        this._isCalculing = true;
        if(getComputedStyle(this).display == 'none') {
            return;
        }
        if(attempt == this._maxCalculateSize) {
            this._isCalculing = false;
            return;
        }

        let element: HTMLElement = this.imgEl;
        if(this.src.endsWith(".svg")) {
            element = this.svgEl;
        }
        this.style.width = '';
        this.style.height = '';
        element.style.width = '';
        element.style.height = '';

        if(element.offsetWidth == 0 && element.offsetHeight == 0) {
            setTimeout(() => {
                this._isCalculing = false;
                this.calculateSize(attempt + 1);
            }, 100);
            return;
        }

        let style = getComputedStyle(this);
        let addedY = Number(style.paddingTop.replace("px", "")) + Number(style.paddingBottom.replace("px", "")) + Number(style.borderTopWidth.replace("px", "")) + Number(style.borderBottomWidth.replace("px", ""));
        let addedX = Number(style.paddingLeft.replace("px", "")) + Number(style.paddingRight.replace("px", "")) + Number(style.borderLeftWidth.replace("px", "")) + Number(style.borderRightWidth.replace("px", ""));
        let availableHeight = this.offsetHeight - addedY;
        let availableWidth = this.offsetWidth - addedX;

        let sameWidth = (element.offsetWidth == availableWidth);
        let sameHeight = (element.offsetHeight == availableHeight);
        this.ratio = element.offsetWidth / element.offsetHeight;
        if(sameWidth && !sameHeight) {
            // height is set
            element.style.width = (availableHeight * this.ratio) + 'px';
            element.style.height = availableHeight + 'px';
        }
        else if(!sameWidth && sameHeight) {
            // width is set
            element.style.width = availableWidth + 'px';
            element.style.height = (availableWidth / this.ratio) + 'px';
        }
        else if(!sameWidth && !sameHeight) {
            if(this.mode == "stretch") {
                element.style.width = '100%';
                element.style.height = '100%';
            }
            else if(this.mode == "contains") {
                // suppose this height is max
                let newWidth = (availableHeight * this.ratio);
                if(newWidth <= availableWidth) {
                    //we can apply this value
                    element.style.width = newWidth + 'px';
                    element.style.height = availableHeight + 'px';
                }
                else {
                    element.style.width = availableWidth + 'px';
                    element.style.height = (availableWidth / this.ratio) + 'px';
                }

            }
            else if(this.mode == "cover") {
                // suppose this height is min
                let newWidth = (availableHeight * this.ratio);
                if(newWidth >= availableWidth) {
                    //we can apply this value
                    element.style.width = newWidth + 'px';
                    element.style.height = availableHeight + 'px';
                }
                else {
                    element.style.width = availableWidth + 'px';
                    element.style.height = (availableWidth / this.ratio) + 'px';
                }
            }
        }

        //center img
        let diffTop = (this.offsetHeight - element.offsetHeight - addedY) / 2;
        let diffLeft = (this.offsetWidth - element.offsetWidth - addedX) / 2;
        element.style.transform = "translate(" + diffLeft + "px, " + diffTop + "px)";
        element.style.opacity = '1';
        this._isCalculing = false;
    }
    private showImg(e: MouseEvent) {
        if(this.display_bigger) {
            let target = e.currentTarget as HTMLElement;
            let position = target.getPositionOnScreen();
            let div = document.createElement("DIV");
            div.style.position = 'absolute';
            div.style.top = position.y + 'px';
            div.style.left = position.x + 'px';
            div.style.width = target.offsetWidth + 'px';
            div.style.height = target.offsetHeight + 'px';
            div.style.backgroundImage = 'url(' + this.src + ')';
            div.style.backgroundSize = 'contain';
            div.style.backgroundRepeat = 'no-repeat';
            div.style.zIndex = '502';
            div.style.transition = 'all 0.7s cubic-bezier(0.65, 0, 0.15, 1)';
            div.style.backgroundPosition = 'center';
            div.style.backgroundColor = 'black';
            this.bigImg = div;
            document.body.appendChild(div);
            setTimeout(() => {
                div.style.top = '50px';
                div.style.left = '50px';
                div.style.width = 'calc(100% - 100px)';
                div.style.height = 'calc(100% - 100px)';
                document.body.addEventListener('click', this.checkCloseBinded);
                document.body.addEventListener('keydown', this.checkCloseBinded);
            }, 100);
        }
    }

    protected override postCreation(): void {

        this.addEventListener("click", (e) => { this.showImg(e); });
        new ResizeObserver(() => {
            this.calculateSize();
        }).observe(this);
    }
	//#endregion
}